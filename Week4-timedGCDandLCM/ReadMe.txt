目标：
计算两个整数的最大公因数、最小公倍数，并统计时间代价。

原理：
1.求最大公约数采用欧几里得辗转相除法。
2.求最小公倍数采用公式 [a,b]*(a,b)==a*b 由最大公约数求得。
3.以 CPU 时钟周期数计算时间代价。

如何编程：
1.1.编写了一个数对类，有求最大公因数、求最小公倍数的方法，有从控制台获取输入数对的方法（复用了从控制台获取输入整数的代码）。
1.2.编写了一个计时器类，有开始、停止、设置系数、给出计时报告的方法。
1.3.编写了一个统计器类，每次向它输入一个数，它能给出所有数的最大值、最小值、平均值。

如何运行：
1.对于每一个测试用例，重复运行 1e5 次，统计消耗的总的 CPU 时间，以此计算单次运行的时间代价。
2.对于每一种问题规模，利用 rand() 函数出 100 组测试用例，对这 100 组用例的时间代价进行统计。
3.实验了 4 种问题规模。

结果：


1.1

输入数据范围在 1 - 32768 时
GCD 平均值 0.2379，最小值 0.14，最大值 0.34。
LCM 平均值 0.3212，最小值 0.22，最大值 0.47。

单位为微秒。GCD - 最大公约数，LCM - 最小公倍数。下同。
具体结果请看 output-32768.txt。下同。

1.2

输入数据范围在 1 - 8192 时
GCD 平均值 0.2201，最小值 0.13，最大值 0.39。
LCM 平均值 0.2927，最小值 0.2，最大值 0.42。

1.3

输入数据范围在 1 - 2048 时
GCD 平均值 0.2，最小值 0.08，最大值 0.35。
LCM 平均值 0.2793，最小值 0.17，最大值 0.74。

1.4

输入数据范围在 1 - 512 时
GCD 平均值 0.1787，最小值 0.06，最大值 0.32。
LCM 平均值 0.2608，最小值 0.13，最大值 0.55。

结论：
1.辗转相除法效率非常高。――在测试的所有数据中，单次耗时没有超过 0.5 微秒的。
2.LCM 耗时比 GCD 长。――这是因为 LCM 利用了 GCD 的结果。
3.时间代价对具体问题敏感。即使问题规模相近，时间代价也可能相差数倍。――这由辗转相除法的特性决定。
4.大体上看，时间代价与问题规模成正相关。数越大，时间代价越大。――这符合预期。

